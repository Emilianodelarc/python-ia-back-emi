[{"curso": "PYTH_1000 - C01 -  Información Extra.pptx", "clase": "PYTH_1000 - C01 -  Información Extra", "slide": 1, "chunk_id": "PYTH_1000 - C01 -  Información Extra-s1-c1", "text": "Python Información extra Schools"}, {"curso": "PYTH_1000 - C01 -  Información Extra.pptx", "clase": "PYTH_1000 - C01 -  Información Extra", "slide": 2, "chunk_id": "PYTH_1000 - C01 -  Información Extra-s2-c1", "text": "Schools Definiciones de las características de Python"}, {"curso": "PYTH_1000 - C01 -  Información Extra.pptx", "clase": "PYTH_1000 - C01 -  Información Extra", "slide": 3, "chunk_id": "PYTH_1000 - C01 -  Información Extra-s3-c1", "text": "Código abierto Cuando un software es de código abierto, significa que su código fuente está disponible para que cualquier persona pueda verlo, modificarlo y distribuirlo. Esto significa que no es propiedad privada de ninguna empresa o individuo en particular. Python es un ejemplo de un lenguaje de programación de código abierto. Schools"}, {"curso": "PYTH_1000 - C01 -  Información Extra.pptx", "clase": "PYTH_1000 - C01 -  Información Extra", "slide": 4, "chunk_id": "PYTH_1000 - C01 -  Información Extra-s4-c1", "text": "Orientado a objetos El uso de la programación orientada a objetos tiene varias ventajas, como la reutilización y la organización más clara del código. También puede hacer que el código sea más fácil de mantener y que se pueda ampliar a medida que el proyecto crece y cambia. Cada objeto tiene sus propios métodos y atributos, que son como variables y funciones asociadas con ese objeto en particular. Schools"}, {"curso": "PYTH_1000 - C01 -  Información Extra.pptx", "clase": "PYTH_1000 - C01 -  Información Extra", "slide": 5, "chunk_id": "PYTH_1000 - C01 -  Información Extra-s5-c1", "text": "Interpretado Python es un lenguaje interpretado, lo que significa que ejecuta directamente el código línea por línea. Si existen errores en el código del programa, su ejecución se detiene. Así, los programadores pueden encontrar errores en el código con rapidez. Schools"}, {"curso": "PYTH_1000 - C01 -  Información Extra.pptx", "clase": "PYTH_1000 - C01 -  Información Extra", "slide": 6, "chunk_id": "PYTH_1000 - C01 -  Información Extra-s6-c1", "text": "Tipado dinámico El tipado dinámico en Python se refiere a la capacidad de asignarles a las variables diferentes tipos de datos en tiempo de ejecución. Esto significa que no es necesario especificar el tipo de datos que se almacenarán en una variable cuando se declara por primera vez. Por ejemplo: Schools"}, {"curso": "PYTH_1000 - C01 -  Información Extra.pptx", "clase": "PYTH_1000 - C01 -  Información Extra", "slide": 7, "chunk_id": "PYTH_1000 - C01 -  Información Extra-s7-c1", "text": "Multiparadigma Python es un lenguaje multiparadigma porque permite programar utilizando diferentes paradigmas. Por ejemplo, se puede utilizar la programación orientada a objetos en Python para crear clases y objetos, o se puede utilizar la programación funcional para escribir funciones y trabajar con datos inmutables. Esto hace que Python sea un lenguaje muy versátil y que pueda adaptarse a diferentes problemas y necesidades. Schools"}, {"curso": "PYTH_1000 - C01 -  Información Extra.pptx", "clase": "PYTH_1000 - C01 -  Información Extra", "slide": 8, "chunk_id": "PYTH_1000 - C01 -  Información Extra-s8-c1", "text": "Multiplataforma Python es un lenguaje multiplataforma porque puede ser utilizado en diferentes sistemas operativos, como Windows, macOS, Linux, etc. Además, hay distribuciones de Python para diferentes plataformas de hardware, como Python para Raspberry Pi o Python para Android. Esto hace que Python sea un lenguaje muy versátil y que pueda ser utilizado en una amplia variedad de proyectos y aplicaciones. Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 1, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s1-c1", "text": "Introducción: Sintaxis Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 2, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Conocer la sintaxis de Python. Escribir las primeras líneas de código. Realizar una primera práctica en Replit utilizando Python."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 3, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s3-c1", "text": "Schools ¿Qué vas a aprender hoy? Sintaxis inicial. Ejecución de código en orden secuencial. Ingresar y mostrar datos por consola."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 4, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s4-c1", "text": "Schools Programar en Python Siempre que programamos, lo hacemos sobre un archivo de texto. Pero no sobre cualquier archivo. Cuando queremos hacer una lista de compras, puede que la guardemos en una nota de texto, que es un archivo de tipo .txt. Si queremos escribir un ensayo, probablemente lo hagamos en un archivo .doc. Para programar en Python, debemos hacerlo en un archivo .py, como el archivo main.py que ofrece Replit."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 5, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s5-c1", "text": "Schools Sintaxis de Python - Comentarios La sintaxis es la forma y el conjunto de reglas con las que debemos escribir las instrucciones para que el ordenador nos entienda y pueda ejecutarlas. Vamos a empezar a conocer la sintaxis de Python. Primero, veamos cómo podemos crear un comentario en nuestro archivo. Los comentarios son bloques de texto usados para ofrecer a otros programadores o a “nuestro futuro yo” información relevante acerca del código que está escrito."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 6, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s6-c1", "text": "Schools Sintaxis de Python - Variables Las variables se pueden entender como cajas en las que se guardan los datos para que queden en la memoria y puedan ser utilizados más adelante en otra instrucción. Veámoslo →"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 7, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s7-c1", "text": "Schools Sintaxis de Python - Variables Para crear una variable, tenemos que indicar su nombre, luego colocar el símbolo igual (=) y, por último, asignarle un valor."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 8, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s8-c1", "text": "Schools Sintaxis de Python - Variables Por buenas prácticas, es recomendable que el nombre de la variable no comience con mayúsculas o números y que no contenga espacios ni caracteres especiales como tildes."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 9, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s9-c1", "text": "Tipos de datos Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 10, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s10-c1", "text": "Schools Sintaxis de Python - Tipos de datos Los datos que contienen las variables pueden ser de distinto tipo: Variables de tipo string Su valor son textos, y estos se escriben entre comillas (\"\"). Pueden contener mayúsculas, tildes, espacios, etc."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 11, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s11-c1", "text": "Schools Sintaxis de Python - Tipos de datos Los datos que contienen las variables pueden ser de distinto tipo: Variables de tipo numéricas Su valor son números y se escriben sin comillas. Si necesitamos escribir decimales, se escriben separados por un punto: 860.65"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 12, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s12-c1", "text": "Schools Sintaxis de Python - Tipos de datos Los datos que contienen las variables pueden ser de distinto tipo: Variables de tipo booleanas Su valor puede ser True o False (Verdadero o Falso). Se escriben en inglés, con la primera letra en mayúscula y sin comillas."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 13, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s13-c1", "text": "Veamos cómo es la ejecución del código… Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 14, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s14-c1", "text": "Schools Ejecución del código La forma de ejecución del código es secuencial, de arriba hacia abajo. A lo largo de la ejecución del código, los valores de las variables pueden ir cambiando; por ejemplo, puede cambiar la variable texto, como en el ejemplo. ¿Cuál crees que sea su último valor ? Monroe Lima e Independencia"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 15, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s15-c1", "text": "Schools Ejecución del código La forma de ejecución del código es secuencial, de arriba hacia abajo. A lo largo de la ejecución del código, los valores de las variables pueden ir cambiando; por ejemplo, puede cambiar la variable texto, como en el ejemplo. ¿Cuál crees que sea su último valor ? Monroe Lima e Independencia"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 16, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s16-c1", "text": "Schools Interactuando con la consola Para saber si nuestro código está bien escrito o si queremos ver el resultado de la ejecución del código, vamos a utilizar una función llamada print(). print() nos permite visualizar datos en la consola. Código Consola"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 17, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s17-c1", "text": "Schools Interactuando con la consola En este caso, estamos mostrando por consola la variable texto a medida que cambia su valor."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 18, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s18-c1", "text": "Schools Interactuando con la consola Si queremos trabajar con datos ingresados por el usuario (por ejemplo, su sabor de helado preferido), vamos a utilizar una función llamada input(). input() permite pedirle datos al usuario, y este deberá ingresar su respuesta desde la consola."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 19, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s19-c1", "text": "Schools Interactuando con la consola Lo típico es guardar esos datos en una variable. Todo lo que se recibe por input() se almacena en formato de tipo texto. Se ingresa el valor chocolate y luego se muestra por consola con un print(). El usuario va a responder desde la consola, pero se puede tomar este dato como el valor de la variable para utilizarlo más adelante."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 20, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s20-c1", "text": "Pero… ¿Eso es todo lo que se puede hacer con las variables? Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 21, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s21-c1", "text": "Schools Concatenación La concatenación es la operación que nos permite unir variables de tipo texto, utilizando el símbolo más. Así podremos combinar cualquier texto con los valores de nuestras variables."}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 22, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s22-c1", "text": "En este link podrás acceder al proyecto de Replit usado para los ejemplos que acabas de ver. Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 23, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s23-c1", "text": "Actividades En Playground encontrarás un cuestionario con preguntas relacionadas con esta presentación. También tendrás que resolver una actividad y entregar el link en Playground. Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 24, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s24-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 25, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s25-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ Sintaxis 02.pptx", "clase": "PYTH_1000 - C01 - Introducción_ Sintaxis 02", "slide": 26, "chunk_id": "PYTH_1000 - C01 - Introducción_ Sintaxis 02-s26-c1", "text": "La clase Introducción: Sintaxis forma parte de… Serie: Senior Tracks Certificate Área(s): Coding. Módulo: PYTHON: INTRODUCCIÓN Schools Digital Skills Diploma"}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 1, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s1-c1", "text": "Introducción: ¿Qué es Python? Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 2, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Definir Python como lenguaje de programación. Escribir comandos en la “terminal”."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 3, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s3-c1", "text": "Schools ¿Qué vas a aprender hoy? Evolución de los lenguajes de programación. Funcionamiento de Python. Ejecutar comandos de Python."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 4, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s4-c1", "text": "¿Qué es la programación? La programación se refiere a la acción de crear programas o aplicaciones a través del desarrollo de un código fuente basado en el conjunto de instrucciones que sigue un ordenador para ejecutar un programa. La programación es lo que permite que un ordenador funcione y realice las tareas que el usuario solicita a través de un lenguaje."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 5, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s5-c1", "text": "Evolución de los lenguajes En realidad, los procesadores de las computadoras pueden entender y ejecutar instrucciones únicamente representadas en código binario, es decir, cadenas de 1 y 0. ¡Sería casi imposible intentar programar así!​ Por eso se crearon los lenguajes de bajo nivel que, en vez de usar números, usan letras que son un poco más fáciles de recordar."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 6, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s6-c1", "text": "Evolución de los lenguajes Los programas escritos en lenguajes de bajo nivel son legibles y, si uno conoce las siglas que representan las distintas instrucciones, puede llegar a entender el sentido de alguna parte del programa. Pero aún así, sería muy difícil y poco práctico para cualquier desarrollador intentar programar tareas del día a día con este tipo de lenguajes."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 7, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s7-c1", "text": "Evolución de los lenguajes Entonces, se creó el lenguaje de alto nivel, que se aproxima más al lenguaje natural humano que al lenguaje binario de las computadoras. Un lenguaje de alto le nivel permite al programador escribir las instrucciones de un programa utilizando palabras o expresiones sintácticas muy similares al inglés."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 8, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s8-c1", "text": "Schools Los más conocidos PYTHON JAVASCRIPT JAVA"}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 9, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s9-c1", "text": "Schools ¿Qué es Python? Es un lenguaje de programación. Como todo lenguaje, tiene su propia sintaxis; es decir que tiene reglas, símbolos y palabras clave que debemos respetar. La ventaja de Python es que tiene una sintaxis muy sencilla. Además, cuenta con una amplia biblioteca de herramientas que hacen que este lenguaje sea único.​ Python es un lenguaje de código abierto, orientado a objetos, interpretado con tipado dinámico, multiparadigma y multiplataforma.​ Haz clic aquí si quieres saber qué significan todas estas características."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 10, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s10-c1", "text": "Schools ¿Y para qué se usa? Big Data Data Science​ Desarrollo Web Frameworks de Pruebas Inteligencia Artificial​"}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 11, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s11-c1", "text": "Pero… ¿Dónde podemos programar? Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 12, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s12-c1", "text": "Schools En Entornos de Desarrollo Integrado​​ (IDE) Formato de escritorio: VSC, PyCharm, Júpiter Notebook, etc. Formato web: Google Colab, Replit, Kaggle, Python Online, etc. En este nivel podrás elegir en que entorno trabajar."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 13, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s13-c1", "text": "Schools Veamos un ejemplo en Replit Calculadora básica creada con Python."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 14, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s14-c1", "text": "Schools Terminal Como se ve en el ejemplo anterior, se escribe el programa en el archivo de código “main.py” y, cuando lo ejecutamos, vemos los resultados por terminal. Esto es así porque con un input() le pedimos al usuario que ingrese dos números, y con un print() mostramos por consola los resultados de los cálculos. En la próxima presentación, hablaremos de estas funciones."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 15, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s15-c1", "text": "Schools Terminal La interfaz de texto (text user interface) es un tipo de interfaz de usuario de computadora que permite darle instrucciones a algún programa informático o al sistema operativo, por medio de una línea de texto simple."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 16, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s16-c1", "text": "Schools ¿Cómo copiar el ejemplo? Con este link, pueden ir al código del ejemplo y generar una copia del proyecto. Cliquear en “Fork Repl”. Confirmar el “Fork”."}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 17, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s17-c1", "text": "Actividades En Playground encontrarás un cuestionario con preguntas relacionadas con esta presentación. Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 18, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s18-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 19, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s19-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01.pptx", "clase": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01", "slide": 20, "chunk_id": "PYTH_1000 - C01 - Introducción_ ¿Qué es Python_ 01-s20-c1", "text": "Serie: Senior Tracks Certificate Área(s): Coding. Módulo: PYTHON: INTRODUCCIÓN Schools Digital Skills Diploma La clase Introducción: ¿Qué es Python? forma parte de…"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 1, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s1-c1", "text": "Schools Tipos de datos"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 2, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Distinguir entre distintos tipos de datos. Realizar operaciones matemáticas. Comparar distintos tipos de datos."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 3, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s3-c1", "text": "Schools ¿Qué vas a aprender hoy? Conocer distintos tipos de datos: string, numéricos y booleanos. Ejecutar funciones int() y str(). Comparar datos."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 4, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s4-c1", "text": "Repasando la clase anterior… Schools"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 5, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s5-c1", "text": "Tipos de datos Por ahora, conocemos 3 tipos de datos: STRING: datos de tipo texto. NÚMEROS: datos de tipo numérico. BOOLEANOS: datos que contienen valor de verdad: True o False."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 6, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s6-c1", "text": "Tipos de datos Además, estuvimos trabajando en cómo concatenar variables con datos de tipo texto."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 7, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s7-c1", "text": "Tipos de datos Ahora... ¿Se pueden concatenar variables de distintos tipos de datos?"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 8, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s8-c1", "text": "Schools Tipos de datos En Python no es posible concatenar una variable con distintos tipos de datos. Entonces, ¿cómo podríamos hacer para concatenar, por ejemplo, calle con altura?"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 9, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s9-c1", "text": "Schools Tipos de datos - int() y str() ¡Utilizando funciones que permitan transformar tipos de datos! str() Transforma un dato a tipo string o texto. int() Transforma un dato a tipo número entero, siempre y cuando el dato que le pasemos entre paréntesis sea un número. Para transformar un dato, solo tenemos que escribir: El nombre de la variable. El dato que queremos transformar dentro de los paréntesis de las funciones int() o str()."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 10, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s10-c1", "text": "Veamos un ejemplo Schools"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 11, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s11-c1", "text": "Schools Ejemplos - ¿Qué está sucediendo aquí?"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 12, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s12-c1", "text": "Schools Ejemplos - ¿Qué está sucediendo aquí? Se están transformando los tipos de datos: De tipo número a tipo texto."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 13, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s13-c1", "text": "Schools Ejemplos - ¿Qué está sucediendo aquí? De tipo número a tipo texto. Se están transformando los tipos de datos: De tipo texto a tipo número."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 14, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s14-c1", "text": "Schools Operaciones matemáticas ¿Qué resultados mostrará el print() de cada una de las operaciones realizadas? Al igual que en matemática, en Python podemos utilizar los símbolos de suma, resta, multiplicación, división y comparación para resolver ejercicios o cálculos."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 15, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s15-c1", "text": "Schools Operaciones matemáticas Al igual que en matemática, en Python podemos utilizar los símbolos de suma, resta, multiplicación, división y comparación para resolver ejercicios o cálculos. En este link puedes ver el ejemplo hecho en Replit."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 16, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s16-c1", "text": "Fusionando todos los conceptos Schools"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 17, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s17-c1", "text": "Schools Tipos de datos - Ejemplo edad Imaginemos que nuestro objetivo es indicarle al usuario qué edad cumplirá en el 2052. Solo el usuario nos podrá indicar el año en que nació. Veamos el paso a paso… Crear una variable y preguntarle al usuario en qué año nació a través de un input. ."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 18, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s18-c1", "text": "Schools Tipos de datos - Ejemplo edad Imaginemos que nuestro objetivo es indicarle al usuario qué edad cumplirá en el 2052. Solo el usuario nos podrá indicar el año en que nació. Veamos el paso a paso… 2052 Ya que la función input devuelve un string, incluso aunque sea un número válido, debemos transformar esa variable a tipo número utilizando la función int() para hacer el cálculo de la edad. ."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 19, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s19-c1", "text": "Schools Tipos de datos - Ejemplo edad Imaginemos que nuestro objetivo es indicarle al usuario qué edad cumplirá en el 2052. Solo el usuario nos podrá indicar el año en que nació. Veamos el paso a paso… 2052 Guardar el cálculo en otra variable para saber la edad del usuario. Para esto, debemos restar al número 2052, la variable nacimiento. ."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 20, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s20-c1", "text": "Schools Tipos de datos - Ejemplo edad Imaginemos que nuestro objetivo es indicarle al usuario qué edad cumplirá en el 2052. Solo el usuario nos podrá indicar el año en que nació. Veamos el paso a paso… 2052 Mostrar la edad del usuario por consola. Para esto, podemos utilizar un print() y concatenar diferentes valores. ."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 21, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s21-c1", "text": "Schools Tipos de datos - Ejemplo edad Imaginemos que nuestro objetivo es indicarle al usuario qué edad cumplirá en el 2052. Solo el usuario nos podrá indicar el año en que nació. Veamos el paso a paso… Como edad es una variable de tipo número, debemos transformarla a texto. Para esto, tendremos que usar la función str()."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 22, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s22-c1", "text": "Tipos de datos - Ejemplo edad Imaginemos que nuestro objetivo es indicarle al usuario qué edad cumplirá en el 2052. Solo el usuario nos podrá indicar el año en que nació. En este link puedes ver el ejemplo hecho en Replit."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 23, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s23-c1", "text": "Veamos un último ejemplo Schools"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 24, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s24-c1", "text": "Schools Tipos de datos - ¿Cuál es el error? Por último, tenemos otro objetivo: preguntarle la edad al usuario y saber si es mayor de edad. Para esto, un programador nos pasó el siguiente código, pero nos da error. ¿Cuál será el error? Y ¿cómo podemos solucionarlo?"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 25, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s25-c1", "text": "Schools Tipos de datos - ¿Cuál es el error? Por último, tenemos otro objetivo: preguntarle la edad al usuario y saber si es mayor de edad. Para esto, un programador nos pasó el siguiente código, pero nos da error. ¿Cuál será el error? Y ¿cómo podemos solucionarlo? Error: comparar un dato de tipo texto con un número."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 26, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s26-c1", "text": "Schools Tipos de datos - ¿Cuál es el error? Por último, tenemos otro objetivo: preguntarle la edad al usuario y saber si es mayor de edad. Para esto, un programador nos pasó el siguiente código pero nos da error. ¿Cuál será el error? Y ¿cómo podemos solucionarlo? Solución: Utilizar la función int() para cambiar el tipo de dato de texto a número."}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 27, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s27-c1", "text": "Actividades En Playground encontrarás un cuestionario con preguntas relacionadas a esta presentación. También tendrás que resolver actividades y entregar el link en Playground. Schools"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 28, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s28-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 29, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s29-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1000 - C02 - Tipos de Datos.pptx", "clase": "PYTH_1000 - C02 - Tipos de Datos", "slide": 30, "chunk_id": "PYTH_1000 - C02 - Tipos de Datos-s30-c1", "text": "La clase Tipos de datos forma parte de… Serie: Senior Tracks Certificate Área(s): Coding. Módulo: PYTHON: INTRODUCCIÓN Schools Digital Skills Diploma"}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 1, "chunk_id": "PYTH_1000 - C03 - Módulos-s1-c1", "text": "Schools Módulos"}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 2, "chunk_id": "PYTH_1000 - C03 - Módulos-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Importar módulos que vienen con Python. Generar números aleatorios con el módulo random. Utilizar la herramienta Blackbox."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 3, "chunk_id": "PYTH_1000 - C03 - Módulos-s3-c1", "text": "Schools ¿Qué vas a aprender hoy? Módulos. Distintos módulos: tkinter datetime urllib random time"}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 4, "chunk_id": "PYTH_1000 - C03 - Módulos-s4-c1", "text": "Módulos Hasta ahora, vimos funciones nativas de Python que ya están disponibles con el lenguaje. Pero Python también nos permite importar módulos que son como “cajas de herramientas” extra que se pueden agregar a un programa para incorporar distintas funciones."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 5, "chunk_id": "PYTH_1000 - C03 - Módulos-s5-c1", "text": "Módulos Algunos se descargan, otros ya forman parte de la Python Standard Library y están listos para importar. Pero… ¿Cómo hacemos para importar un módulo?"}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 6, "chunk_id": "PYTH_1000 - C03 - Módulos-s6-c1", "text": "Schools ¿Cómo importar un módulo? Para poder cargar un módulo a un programa con Python, debemos hacer uso de la palabra reservada import seguida del nombre del módulo. Veamos un ejemplo de cómo importar el módulo tkinter: Los import siempre van al inicio del archivo."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 7, "chunk_id": "PYTH_1000 - C03 - Módulos-s7-c1", "text": "Schools tkinter tkinter es un módulo que funciona para crear y desarrollar aplicaciones de escritorio. Ventana de escritorio En este link tienes el ejemplo hecho en Replit."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 8, "chunk_id": "PYTH_1000 - C03 - Módulos-s8-c1", "text": "Schools datetime datetime es un módulo que nos permite trabajar con fechas y manipularlas con funciones específicas. En este link tienes el ejemplo hecho en Replit."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 9, "chunk_id": "PYTH_1000 - C03 - Módulos-s9-c1", "text": "Veamos otra forma de importar módulos Schools"}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 10, "chunk_id": "PYTH_1000 - C03 - Módulos-s10-c1", "text": "Schools ¿Cómo importar módulos o funciones de forma selectiva? También podemos realizar importaciones selectivas, que nos van a permitir ahorrar mucha memoria en nuestros scripts. Para eso, podemos usar la palabra reservada from seguida del nombre del módulo; luego, la palabra reservada import y, finalmente, la función que deseamos importar."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 11, "chunk_id": "PYTH_1000 - C03 - Módulos-s11-c1", "text": "Schools ¿Cómo importar módulos o funciones de forma selectiva? De esta forma, podemos importar la función que necesitamos para no tener que escribir el nombre del módulo todo el tiempo. Veamos la diferencia:"}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 12, "chunk_id": "PYTH_1000 - C03 - Módulos-s12-c1", "text": "Veamos otros módulos Schools"}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 13, "chunk_id": "PYTH_1000 - C03 - Módulos-s13-c1", "text": "Schools urllib.request urllib.request es una librería que nos permite abrir y leer URLs. En este link tienes el ejemplo hecho en Replit."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 14, "chunk_id": "PYTH_1000 - C03 - Módulos-s14-c1", "text": "Schools random random incluye un conjunto de funciones que permiten obtener números aleatorios. Después de importar un módulo, se le puede asignar otro nombre más reducido. Para eso, primero escribimos la palabra “as” y luego, el nuevo nombre que queremos darle. Esto sirve para escribir menos código. En este link tienes el ejemplo hecho en Replit."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 15, "chunk_id": "PYTH_1000 - C03 - Módulos-s15-c1", "text": "Schools time time sirve para generar pausas en tu programa y controlar el tiempo en que se ejecuta cada función. En este link tienes el ejemplo hecho en Replit. Para generar una pausa en segundos, usamos time.sleep()."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 16, "chunk_id": "PYTH_1000 - C03 - Módulos-s16-c1", "text": "¿Cómo saber qué módulos usar? Schools Existen módulos para todo, y también herramientas que nos ayudan a saber cuál usar."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 17, "chunk_id": "PYTH_1000 - C03 - Módulos-s17-c1", "text": "Schools Blackbox Si escribimos “how to get the stock data of Tesla in python?”, en español sería: “¿Cómo obtener los datos de stock de Tesla en Python?”. En esta página web llamada BLACKBOX, si escribes una pregunta, te generará automáticamente el fragmento de código correcto para usar en cualquier lenguaje de programación. Hay que escribir las preguntas en inglés. ¿Qué crees que mostrará?"}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 18, "chunk_id": "PYTH_1000 - C03 - Módulos-s18-c1", "text": "Schools Blackbox Como podemos ver, debemos importar dos módulos: urllib.request json Ahora, copiamos el código en nuestro Replit y vemos qué resultado obtenemos."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 19, "chunk_id": "PYTH_1000 - C03 - Módulos-s19-c1", "text": "Schools Blackbox Como podemos ver en este ejemplo, hay infinitas posibilidades de búsqueda. Realiza una búsqueda de algo que quieras hacer en BLACKBOX y comenta los resultados en clase con tus compañeros/as. En este link tienes el ejemplo hecho en Replit."}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 20, "chunk_id": "PYTH_1000 - C03 - Módulos-s20-c1", "text": "Actividades En Playground encontrarás un cuestionario con preguntas relacionadas a esta presentación. También tendrás que resolver actividades y entregar el link en Playground. Schools"}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 21, "chunk_id": "PYTH_1000 - C03 - Módulos-s21-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 22, "chunk_id": "PYTH_1000 - C03 - Módulos-s22-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1000 - C03 - Módulos.pptx", "clase": "PYTH_1000 - C03 - Módulos", "slide": 23, "chunk_id": "PYTH_1000 - C03 - Módulos-s23-c1", "text": "La clase Módulos forma parte de… Serie: Senior Tracks Certificate Área(s): Coding. Módulo: PYTHON: INTRODUCCIÓN Schools Digital Skills Diploma"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 1, "chunk_id": "PYTH_1200 - C01 - Funciones-s1-c1", "text": "Funciones Schools"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 2, "chunk_id": "PYTH_1200 - C01 - Funciones-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Comprender cómo crear una función. Probar distintos ejemplos en Replit."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 3, "chunk_id": "PYTH_1200 - C01 - Funciones-s3-c1", "text": "Schools ¿Qué vas a aprender hoy? Saber cómo es el cuerpo de una función. Conocer las palabras reservadas de las funciones."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 4, "chunk_id": "PYTH_1200 - C01 - Funciones-s4-c1", "text": "Funciones Cuando creamos nuestros propios programas, nos damos cuenta de que muchas de las tareas que implementamos se repiten o se presentan de forma similar, pero con algunos cambios.​"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 5, "chunk_id": "PYTH_1200 - C01 - Funciones-s5-c1", "text": "Funciones Entonces, aparece la necesidad de agrupar el código. A las agrupaciones de código se las denominan funciones, y estas permiten definir un bloque de código reutilizable que se puede ejecutar muchas veces dentro de tu programa."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 6, "chunk_id": "PYTH_1200 - C01 - Funciones-s6-c1", "text": "Funciones Las funciones te permiten crear soluciones más modulares. En tu programa puede haber muchas funciones, y cada una resolverá una tarea específica."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 7, "chunk_id": "PYTH_1200 - C01 - Funciones-s7-c1", "text": "Schools Funciones Python ya proporciona muchas funciones integradas, como: input() → Función de entrada para solicitar información al usuario. print() → Función de impresión para mostrar un mensaje por consola. len() → Función que devuelve el número de elementos (longitud) de un objeto o cadena. int() → Convierte un valor a tipo int (entero) str() → Convierte un valor a tipo cadena de texto (string) Pero también puedes definir tus propias funciones para usar en tus proyectos. Una de las grandes ventajas de usar funciones es que reducen el número total de líneas de código en tu proyecto."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 8, "chunk_id": "PYTH_1200 - C01 - Funciones-s8-c1", "text": "Schools Funciones Por ejemplo: Con la función len(), podemos verificar la cantidad de caracteres de un texto y saber si podría ir dentro de un tweet, que puede tener, como máximo, 280 caracteres. En este link puedes ver el ejemplo hecho en Replit. En la próxima clase, trabajaremos con este mismo ejemplo, pero con condicionales."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 9, "chunk_id": "PYTH_1200 - C01 - Funciones-s9-c1", "text": "¿Cómo escribir una función? Schools"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 10, "chunk_id": "PYTH_1200 - C01 - Funciones-s10-c1", "text": "Schools Funciones - Sintaxis Supongamos que queremos calcular e imprimir el doble de un número cualquiera. Sabemos que una forma sencilla de hacerlo sería utilizando un código como este. Ahora, ¿qué pasa si queremos hacer esto muchas veces? Podemos escribir una estructura genérica que contenga las instrucciones necesarias para obtener el resultado deseado. Esa estructura es lo que conocemos como función, y en Python se ve así:"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 11, "chunk_id": "PYTH_1200 - C01 - Funciones-s11-c1", "text": "Schools Funciones - Sintaxis def es una palabra reservada para definir funciones."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 12, "chunk_id": "PYTH_1200 - C01 - Funciones-s12-c1", "text": "Schools Funciones - Sintaxis def es una palabra reservada para definir funciones. duplicar es el nombre que nosotros le asignamos a la función."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 13, "chunk_id": "PYTH_1200 - C01 - Funciones-s13-c1", "text": "Schools Funciones - Sintaxis def es una palabra reservada para definir funciones. duplicar es el nombre que nosotros le asignamos a la función. numero es el argumento que le pasamos. Los argumentos son elementos que ingresan en la función, muchas veces en forma de variables."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 14, "chunk_id": "PYTH_1200 - C01 - Funciones-s14-c1", "text": "Schools Funciones - Sintaxis def es una palabra reservada para definir funciones. duplicar es el nombre que nosotros le asignamos a la función. numero es el argumento que le pasamos. Los argumentos son elementos que ingresan en la función, muchas veces en forma de variables. Siempre cerramos la línea con dos puntos (:)."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 15, "chunk_id": "PYTH_1200 - C01 - Funciones-s15-c1", "text": "Veamos el cuerpo de la función Schools"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 16, "chunk_id": "PYTH_1200 - C01 - Funciones-s16-c1", "text": "Schools Funciones - Sintaxis Python utiliza la indentación para delimitar la estructura, permitiendo establecer bloques de código. Aquí comienza lo que llamamos el cuerpo de la función, es decir, todo el bloque de código que contiene las instrucciones que queremos darle a la computadora. Es muy importante señalar que el cuerpo debe estar indentado (¿habías notado la sangría?)."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 17, "chunk_id": "PYTH_1200 - C01 - Funciones-s17-c1", "text": "Schools Funciones - Sintaxis Python utiliza la indentación para delimitar la estructura permitiendo establecer bloques de código. Multiplicamos numero por 2 y lo guardamos en la variable doble. Aquí comienza lo que llamamos el cuerpo de la función, es decir, todo el bloque de código que contiene las instrucciones que queremos darle a la computadora. Es muy importante señalar que el cuerpo debe estar indentado (¿habías notado la sangría?)."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 18, "chunk_id": "PYTH_1200 - C01 - Funciones-s18-c1", "text": "Schools Funciones - Sintaxis Python utiliza la indentación para delimitar la estructura permitiendo establecer bloques de código. Aquí comienza lo que llamamos el cuerpo de la función, es decir, todo el bloque de código que contiene las instrucciones que queremos darle a la computadora. Es muy importante señalar que el cuerpo debe estar indentado (¿habías notado la sangría?). La instrucción return indica el final de la función, y acá le pedimos que nos devuelva el valor de la variable doble. Multiplicamos numero por 2 y lo guardamos en la variable doble"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 19, "chunk_id": "PYTH_1200 - C01 - Funciones-s19-c1", "text": "Schools Funciones - Sintaxis Para hacer uso de una función previamente definida, basta con llamarla por su nombre e indicar entre paréntesis qué valor adoptan sus argumentos, si los hay. En este link puedes ver el ejemplo hecho en Replit. En este ejemplo, ejecutamos varias veces nuestra función dentro de un print() para mostrar el resultado por consola."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 20, "chunk_id": "PYTH_1200 - C01 - Funciones-s20-c1", "text": "Veamos más ejemplos Schools"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 21, "chunk_id": "PYTH_1200 - C01 - Funciones-s21-c1", "text": "Schools Otras funciones Como podemos ver en la imagen, creamos dos funciones para calcular distintas cosas: areaTriangulo() areaCirculo() Veamos cómo ejecutar estas funciones para que sean dinámicas ´ ´ ´ ´"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 22, "chunk_id": "PYTH_1200 - C01 - Funciones-s22-c1", "text": "Schools Otras funciones Antes de ejecutar cada función, almacenamos en variables los argumentos que queremos calcular. Esto lo hacemos con la ayuda de input() y editando los tipos de datos con int(). En este link puedes ver el ejemplo hecho en Replit. ¡Ejecuta las funciones del ejemplo creado en Replit para ver los resultados que obtienes! ´ ´ ´ ´ ´ ´ ´"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 23, "chunk_id": "PYTH_1200 - C01 - Funciones-s23-c1", "text": "Schools ¡Bonus track! Un ejemplo distinto de Tkinter Creamos una función con el nombre saludar(), que sirve para editar el texto dentro de la ventana. El texto que pasemos como argumento de la función es el que se va a mostrar en la ventana. En este link tienes el ejemplo hecho en Replit."}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 24, "chunk_id": "PYTH_1200 - C01 - Funciones-s24-c1", "text": "Actividades En Playground encontrarás un cuestionario con preguntas relacionadas a esta presentación. También tendrás que resolver actividades y entregar el link en Playground. Schools"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 25, "chunk_id": "PYTH_1200 - C01 - Funciones-s25-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 26, "chunk_id": "PYTH_1200 - C01 - Funciones-s26-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1200 - C01 - Funciones.pptx", "clase": "PYTH_1200 - C01 - Funciones", "slide": 27, "chunk_id": "PYTH_1200 - C01 - Funciones-s27-c1", "text": "La clase Funciones forma parte de… Serie: Senior Tracks Certificate Área(s): Coding. Módulo: PYTHON: PROGRAMACIÓN ESTRUCTURADA Schools Digital Skills Diploma"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 1, "chunk_id": "PYTH_1200 - C02 - Condicionales-s1-c1", "text": "Schools Condicionales"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 2, "chunk_id": "PYTH_1200 - C02 - Condicionales-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Comprender estructuras condicionales. Reconocer algoritmos y diagramas de flujo. Identificar la secuencia de pasos de diagramas de flujo."}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 3, "chunk_id": "PYTH_1200 - C02 - Condicionales-s3-c1", "text": "¿Qué vas a aprender hoy? Schools Estructuras condicionales. Palabras reservadas de las condicionales. Diagramas de flujo."}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 4, "chunk_id": "PYTH_1200 - C02 - Condicionales-s4-c1", "text": "En nuestra vida diaria, actuamos de acuerdo a la evaluación de condiciones de manera mucho más frecuente de lo que en realidad creemos, por ejemplo: Si el semáforo está en rojo, cruzamos la calle. Si no, no la cruzamos. Schools"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 5, "chunk_id": "PYTH_1200 - C02 - Condicionales-s5-c1", "text": "En cualquier lenguaje de programación, el código necesita tomar decisiones y realizar diferentes acciones dependiendo de distintas situaciones. Por ejemplo, en un juego, si el número de vidas del jugador es 0, entonces se termina la partida. Schools"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 6, "chunk_id": "PYTH_1200 - C02 - Condicionales-s6-c1", "text": "Condicionales ¡Hoy vas a comenzar a trabajar con condicionales! Veremos cómo funcionan estas declaraciones en Python y cómo te ayudarán a que el código ejecute una u otra parte de un código determinado."}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 7, "chunk_id": "PYTH_1200 - C02 - Condicionales-s7-c1", "text": "Condicionales Para poder interpretar mejor las condicionales, podemos utilizar diagramas de flujo. Estos diagramas son la representación gráfica de un algoritmo o proceso."}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 8, "chunk_id": "PYTH_1200 - C02 - Condicionales-s8-c1", "text": "¿Qué es un algoritmo y qué son los diagramas de flujo? Schools"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 9, "chunk_id": "PYTH_1200 - C02 - Condicionales-s9-c1", "text": "Algoritmo Diagrama de flujo Es una secuencia de pasos lógicos que resuelven un problema. Incluye una serie de reglas o instrucciones con las que se ejecutará un programa. Es la representación gráfica y secuencial de un proceso o flujo de trabajo con todas las tareas principales necesarias para lograr un objetivo común. Schools"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 10, "chunk_id": "PYTH_1200 - C02 - Condicionales-s10-c1", "text": "Schools Veamos el paso a paso de cómo cocinar un huevo, representado en un diagrama de flujo: ´ ´ Algoritmos y diagramas de flujo"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 11, "chunk_id": "PYTH_1200 - C02 - Condicionales-s11-c1", "text": "Schools Operadores de comparación > | Devuelve True si el operador de la izquierda es mayor que el operador de la derecha | 12 > 3 devuelve True < | Devuelve True si el operador de la derecha es mayor que el operador de la izquierda | 12 < 3 devuelve False == | Devuelve True si ambos operadores son iguales | 12 == 3 devuelve False >= | Devuelve True si el operador de la izquierda es mayor o igual al operador de la derecha | 12 >= 3 devuelve True <= | Devuelve True si el operador de la derecha es mayor o igual al operador de la izquierda | 12 <= 3 devuelve False != | Devuelve True si los operadores no son iguales | 12 != 3 devuelve True and | Devuelve True cuando las dos condiciones son verdaderas. | 12 == 12 and 12 != 5 devuelve True or | Devuelve True cuando, al menos, uno de los elementos es igual a True. | 12 == 11 or 12 != 12 devuelve False Para plantear distintas condiciones y poder tomar decisiones dentro de una condicional, podemos usar los operadores de comparación:"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 12, "chunk_id": "PYTH_1200 - C02 - Condicionales-s12-c1", "text": "Schools Veamos otro ejemplo… En este ejemplo, podemos ver el diagrama de flujo del envío de un tuit. ´ ENVIAR TUIT ERROR: NO SE PUEDE ENVIAR TUIT"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 13, "chunk_id": "PYTH_1200 - C02 - Condicionales-s13-c1", "text": "Schools Veamos el paso a paso… ´ ENVIAR TUIT ERROR: NO SE PUEDE ENVIAR TUIT Iniciamos el algoritmo. El usuario ingresa el texto del tuit. Se evalúa la condición: si el texto ingresado por el usuario tiene una longitud menor o igual a 280 y mayor que 0. En caso de que no se cumpla la condición, se muestra un mensaje indicando que no se cumple con lo necesario para enviar el tuit, y se obliga al usuario a volver al paso inicial. En caso de que se cumpla la condición, se procede a enviar el tuit. Finaliza el algoritmo. Veamos cómo se escribe en código"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 14, "chunk_id": "PYTH_1200 - C02 - Condicionales-s14-c1", "text": "Schools ¿Cómo se escriben estos pasos en código? En este link puedes ver el ejemplo hecho en Replit. main.py"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 15, "chunk_id": "PYTH_1200 - C02 - Condicionales-s15-c1", "text": "¿Cómo es la sintaxis del if? Schools"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 16, "chunk_id": "PYTH_1200 - C02 - Condicionales-s16-c1", "text": "main.py Schools Sintaxis del if if es una palabra reservada para definir condicionales."}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 17, "chunk_id": "PYTH_1200 - C02 - Condicionales-s17-c1", "text": "main.py Schools Sintaxis del if if es una palabra reservada para definir condicionales. condición: definimos lo que queremos evaluar. Dentro de la condición, podemos usar los distintos operadores de comparación."}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 18, "chunk_id": "PYTH_1200 - C02 - Condicionales-s18-c1", "text": "main.py Schools Sintaxis del if if es una palabra reservada para definir condicionales. condición: definimos lo que queremos evaluar. Dentro de la condición, podemos usar los distintos operadores de comparación. Siempre cerramos la línea con dos puntos (:)."}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 19, "chunk_id": "PYTH_1200 - C02 - Condicionales-s19-c1", "text": "Ahora veamos el cuerpo del if Schools"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 20, "chunk_id": "PYTH_1200 - C02 - Condicionales-s20-c1", "text": "main.py Schools Cuerpo del if Aquí comienza lo que llamamos el cuerpo del if, es decir, todo el bloque de código que contiene las instrucciones que queremos darle al programa en caso de que la condición sea True. Es muy importante señalar que el cuerpo debe estar indentado. Python utiliza la indentación para delimitar la estructura permitiendo establecer bloques de código."}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 21, "chunk_id": "PYTH_1200 - C02 - Condicionales-s21-c1", "text": "main.py Schools Cuerpo del if Aquí comienza lo que llamamos el cuerpo del if, es decir, todo el bloque de código que contiene las instrucciones que queremos darle al programa en caso de que la condición sea True. Es muy importante señalar que el cuerpo debe estar indentado. Evaluamos si 20 es mayor que 18. En caso de que la condición sea True, mostrar por consola “El número 20 es mayor”."}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 22, "chunk_id": "PYTH_1200 - C02 - Condicionales-s22-c1", "text": "Veamos un último ejemplo y aumentemos la dificultad. Schools"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 23, "chunk_id": "PYTH_1200 - C02 - Condicionales-s23-c1", "text": "main.py Schools Sintaxis if - elif - else En el siguiente código, podemos ver cómo se traduce la palabra “Hola” al idioma ingresado. Pero si necesitamos traducir esta palabra a otros idiomas, ¿cómo podríamos lograrlo dentro del mismo if?"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 24, "chunk_id": "PYTH_1200 - C02 - Condicionales-s24-c1", "text": "main.py Schools Sintaxis if - elif - else Python nos proporciona la palabra reservada elif para agregar más de una condición dentro del mismo if. En este caso, sumamos más idiomas. Si la condición del if es False, pasa a evaluar el primer elif. En caso de que vuelva a dar False, continúa con el siguiente, y así sucesivamente pasando por cada elif que exista. Python utiliza la indentación para delimitar la estructura permitiendo establecer bloques de código."}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 25, "chunk_id": "PYTH_1200 - C02 - Condicionales-s25-c1", "text": "main.py Schools Sintaxis if - elif - else En este link puedes ver el ejemplo hecho en Replit. Si el usuario ingresa un idioma diferente a los que agregamos (“Inglés”, “Francés” o “Portugués”), el programa no ejecuta ninguna instrucción y tampoco le muestra un mensaje al usuario. Para mostrar un mensaje que diga, por ejemplo, “No podemos traducir este idioma”, en el caso de que NO se cumpla con la condición, debemos usar la sentencia else."}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 26, "chunk_id": "PYTH_1200 - C02 - Condicionales-s26-c1", "text": "Actividades En Playground encontrarás un cuestionario con preguntas relacionadas con esta presentación. También tendrás que resolver actividades y entregar el link en Playground. Schools"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 27, "chunk_id": "PYTH_1200 - C02 - Condicionales-s27-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 28, "chunk_id": "PYTH_1200 - C02 - Condicionales-s28-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1200 - C02 - Condicionales.pptx", "clase": "PYTH_1200 - C02 - Condicionales", "slide": 29, "chunk_id": "PYTH_1200 - C02 - Condicionales-s29-c1", "text": "La clase Condicionales forma parte de… Serie: Senior Tracks Certificate Área(s): PROGRAMACIÓN POR CÓDIGO (PYTHON) Módulo: PYTHON: PROGRAMACIÓN ESTRUCTURADA Schools Digital Skills Diploma"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 1, "chunk_id": "PYTH_1200 - C03 - Bucles While-s1-c1", "text": "Bucles while Schools"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 2, "chunk_id": "PYTH_1200 - C03 - Bucles While-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Comprender cómo crear un bucle while. Probar distintos ejemplos en Replit."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 3, "chunk_id": "PYTH_1200 - C03 - Bucles While-s3-c1", "text": "¿Qué vas a aprender hoy? Schools Conocer la sintaxis de un bucle. Utilizar una variable contador dentro del while."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 4, "chunk_id": "PYTH_1200 - C03 - Bucles While-s4-c1", "text": "Bucle while Imagina que estás por comenzar un juego en el que tu personaje tiene 5 vidas; mientras se cumpla la condición de tener una o más vidas, sigues jugando. Si la vida de tu personaje llega a 0, el juego se detiene. Veamos cómo sería el código del juego →"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 5, "chunk_id": "PYTH_1200 - C03 - Bucles While-s5-c1", "text": "Bucle while"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 6, "chunk_id": "PYTH_1200 - C03 - Bucles While-s6-c1", "text": "Bucle while En este diagrama de flujo, podrás ver la ejecución de un bucle while. True False"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 7, "chunk_id": "PYTH_1200 - C03 - Bucles While-s7-c1", "text": "Bucle while Inicia el bucle. Evalúa la condición. Si es True, ejecuta el bloque. Vuelve a evaluar la condición. Si es False, termina el bucle. 1 2 3 4 5 True False"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 8, "chunk_id": "PYTH_1200 - C03 - Bucles While-s8-c1", "text": "Bucle while El uso del while nos permite ejecutar una sección de código repetidas veces, y esta se ejecutará mientras una condición determinada se cumpla."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 9, "chunk_id": "PYTH_1200 - C03 - Bucles While-s9-c1", "text": "Bucle while Cuando se deje de cumplir, se saldrá del bucle y continuará la ejecución normal de las siguientes líneas. Llamaremos iteración a una ejecución completa del bloque de código."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 10, "chunk_id": "PYTH_1200 - C03 - Bucles While-s10-c1", "text": "¿Cómo escribir un bucle while? Schools"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 11, "chunk_id": "PYTH_1200 - C03 - Bucles While-s11-c1", "text": "Schools Bucle while - Sintaxis while es una palabra reservada para definir bucles. main.py"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 12, "chunk_id": "PYTH_1200 - C03 - Bucles While-s12-c1", "text": "Schools Bucle while - Sintaxis while es una palabra reservada para definir bucles. main.py Cuando la condición no se cumple (False), la ejecución del bucle se detiene. La condición, en este caso contador < 5, es lo que se tiene que cumplir para que se ejecute el código."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 13, "chunk_id": "PYTH_1200 - C03 - Bucles While-s13-c1", "text": "Schools Bucle while - Sintaxis while es una palabra reservada para definir bucles. main.py Cuando la condición no se cumple (False), la ejecución del bucle se detiene. La condición, en este caso contador, es lo que se tiene que cumplir para que se ejecute el código. Siempre cerramos la línea con dos puntos (:)."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 14, "chunk_id": "PYTH_1200 - C03 - Bucles While-s14-c1", "text": "Veamos el cuerpo del bucle Schools"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 15, "chunk_id": "PYTH_1200 - C03 - Bucles While-s15-c1", "text": "Schools Aquí comienza lo que llamamos el cuerpo del bucle, es decir, todo el bloque de código que contiene las instrucciones que queremos darle al programa. Recuerda que el cuerpo debe estar indentado. Bucle while - Sintaxis Python utiliza la indentación para delimitar la estructura permitiendo establecer bloques de código. main.py"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 16, "chunk_id": "PYTH_1200 - C03 - Bucles While-s16-c1", "text": "Schools Aquí comienza lo que llamamos el cuerpo del bucle, es decir, todo el bloque de código que contiene las instrucciones que queremos darle al programa. Recuerda que el cuerpo debe estar indentado. Bucle while - Sintaxis main.py La variable contador va a almacenar el valor que se quiere evaluar. Incrementamos el valor de contador de uno en uno. Python utiliza la indentación para delimitar la estructura permitiendo establecer bloques de código."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 17, "chunk_id": "PYTH_1200 - C03 - Bucles While-s17-c1", "text": "Schools Aquí comienza lo que llamamos el cuerpo del bucle, es decir, todo el bloque de código que contiene las instrucciones que queremos darle al programa. Recuerda que el cuerpo debe estar indentado. Bucle while - Sintaxis main.py La variable contador va a almacenar el valor que se quiere evaluar. Incrementamos el valor de contador de uno en uno. Python utiliza la indentación para delimitar la estructura permitiendo establecer bloques de código. Mientras contador sea menor a 5, el bucle se seguirá ejecutando. Una vez finalizado el bucle, se ejecutará el resto del código."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 18, "chunk_id": "PYTH_1200 - C03 - Bucles While-s18-c1", "text": "Schools Bucle while - Sintaxis En este link puedes ver el ejemplo hecho en Replit. No olvides incrementar el valor de contador en cada paso (iteración). Se utiliza una variable numérica como contador de iteraciones. El bucle se repite mientras la variable contador cumpla la condición. En este ejemplo, mientras contador sea menor a 5, el bucle se sigue ejecutando."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 19, "chunk_id": "PYTH_1200 - C03 - Bucles While-s19-c1", "text": "Veamos otro ejemplo Schools"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 20, "chunk_id": "PYTH_1200 - C03 - Bucles While-s20-c1", "text": "Schools Bucle while con Contador - Ejemplo Se utiliza la variable cantidadElefantes como contador de iteraciones. ¿Podríamos hacer un bucle while sin utilizar una variable como contador? ¡SÍ! Veamos un ejemplo → El bucle se repite mientras cantidadElefantes sea menor o igual a 20."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 21, "chunk_id": "PYTH_1200 - C03 - Bucles While-s21-c1", "text": "Schools Bucle while sin Contador Se utiliza la variable telaResiste como parte de la condición. Mientras telaResiste sea SÍ, el bucle se repite. De esta forma, podemos controlar la cantidad de veces que se ejecuta el bucle con un input(). En este link puedes ver el ejemplo hecho en Replit."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 22, "chunk_id": "PYTH_1200 - C03 - Bucles While-s22-c1", "text": "Veamos un último ejemplo Schools"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 23, "chunk_id": "PYTH_1200 - C03 - Bucles While-s23-c1", "text": "Schools Bucle while con Contador - Ejemplo En este ejemplo, el bucle while se ejecuta hasta que el empleado tenga 65 años. En este link puedes ver el ejemplo hecho en Replit."}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 24, "chunk_id": "PYTH_1200 - C03 - Bucles While-s24-c1", "text": "Para tener en cuenta: Bucle infinito Schools"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 25, "chunk_id": "PYTH_1200 - C03 - Bucles While-s25-c1", "text": "Schools Bucle infinito Si la condición del bucle se cumple siempre, este no terminará nunca de ejecutarse y tendremos lo que se llama un bucle infinito. Estos deben evitarse, porque significa perder el control del programa. Para interrumpir un bucle infinito, hay que pulsar la combinación de teclas Ctrl + C. Al interrumpir un programa, se mostrará un mensaje de error similar a este:"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 26, "chunk_id": "PYTH_1200 - C03 - Bucles While-s26-c1", "text": "Actividades En Playground encontrarás dos cuestionarios con preguntas relacionadas con esta presentación. También tendrás que resolver una actividad y entregar el link en Playground. Schools"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 27, "chunk_id": "PYTH_1200 - C03 - Bucles While-s27-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 28, "chunk_id": "PYTH_1200 - C03 - Bucles While-s28-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1200 - C03 - Bucles While.pptx", "clase": "PYTH_1200 - C03 - Bucles While", "slide": 29, "chunk_id": "PYTH_1200 - C03 - Bucles While-s29-c1", "text": "La clase Bucles while forma parte de… Serie: Senior Tracks Certificate Área(s): PROGRAMACIÓN POR CÓDIGO (PYTHON) Módulo: PYTHON: PROGRAMACIÓN ESTRUCTURADA Schools Digital Skills Diploma"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 1, "chunk_id": "PYTH_1300 - C01 - Listas 01-s1-c1", "text": "Listas 01 Schools"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 2, "chunk_id": "PYTH_1300 - C01 - Listas 01-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Guardar varios elementos en una misma estructura de datos. Obtener, modificar y acceder a los datos de una lista. Identificar distintos métodos para trabajar con estructuras de datos."}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 3, "chunk_id": "PYTH_1300 - C01 - Listas 01-s3-c1", "text": "¿Qué vas a aprender hoy? Schools Estructuras de datos: listas. Índices y elementos de una lista. Métodos de listas como max(), min(), sum() y len(), entre otros."}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 4, "chunk_id": "PYTH_1300 - C01 - Listas 01-s4-c1", "text": "En esta clase, aprenderás una de las estructuras de datos más útiles en Python: las listas Video Game Dance Sticker by Leroy Patterson"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 5, "chunk_id": "PYTH_1300 - C01 - Listas 01-s5-c1", "text": "Schools ¿Qué son las listas? main.py Son estructuras de datos que permiten guardar varios elementos. Podemos imaginar que son cajas que, en vez de guardar un solo dato, pueden guardar varios. Por ejemplo:"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 6, "chunk_id": "PYTH_1300 - C01 - Listas 01-s6-c1", "text": "Schools ¿Qué son las listas? main.py Se crean al asignar a una variable una secuencia de elementos encerrados entre corchetes y separados por comas. A cada ítem dentro de la lista se lo llama elemento."}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 7, "chunk_id": "PYTH_1300 - C01 - Listas 01-s7-c1", "text": "Ahora, veamos cómo podemos seleccionar un elemento de la lista utilizando los índices. Schools"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 8, "chunk_id": "PYTH_1300 - C01 - Listas 01-s8-c1", "text": "Schools Listas - Acceder a un elemento main.py Para poder acceder a los elementos y seleccionarlos, se usa un índice de posiciones. El primer elemento de la lista siempre lleva el índice cero. 0 1 2 3 elemento"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 9, "chunk_id": "PYTH_1300 - C01 - Listas 01-s9-c1", "text": "Schools Listas - Acceder a un elemento main.py Para acceder a un elemento de la lista, solo hay que indicar el nombre de la variable y, entre corchetes, el número del índice del elemento al que queremos acceder. Esto nos devuelve un valor."}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 10, "chunk_id": "PYTH_1300 - C01 - Listas 01-s10-c1", "text": "Schools main.py Listas - Modificar un elemento Para cambiar o modificar un elemento de la lista, puedes usar el índice tanto para seleccionar como para asignar valor: Nombre de la lista junto al índice entre corchetes Nuevo valor"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 11, "chunk_id": "PYTH_1300 - C01 - Listas 01-s11-c1", "text": "Schools En este link podrás acceder al proyecto de Replit que usamos para los ejemplos de índices."}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 12, "chunk_id": "PYTH_1300 - C01 - Listas 01-s12-c1", "text": "Schools main.py Veamos el siguiente ejemplo… ¿Cuál es el índice del día sábado? ¿Cuántos elementos tiene la lista semana? ¿Cuál es el índice más bajo de la lista semana? ¿Cuál es el índice más alto de la lista semana? ¿Cómo hago si quiero traer el día martes solamente en una variable llamada diaPreferido?"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 13, "chunk_id": "PYTH_1300 - C01 - Listas 01-s13-c1", "text": "Schools main.py Veamos el siguiente ejemplo… ¿Cuál es el índice del día sábado? ¿Cuántos elementos tiene la lista semana? ¿Cuál es el índice más bajo de la lista semana? ¿Cuál es el índice más alto de la lista semana? ¿Cómo hago si quiero traer el día martes solamente en una variable llamada diaPreferido? 5 7 0 6 diaPreferido = semana[1]"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 14, "chunk_id": "PYTH_1300 - C01 - Listas 01-s14-c1", "text": "main.py Schools Slicing [:] - Básico ¿Cómo hacemos para tomar varios elementos? Por ejemplo, solo los días laborales. ¡A través de cortes de la lista con sus índices! main.py Los slicing permiten extraer una porción de una lista para crear una nueva."}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 15, "chunk_id": "PYTH_1300 - C01 - Listas 01-s15-c1", "text": "main.py Schools Slicing [:] - Básico Hay que indicar los dos índices: el de inicio y el de fin de la porción que queremos extraer. 0 1 2 3 4 5 6 Inicio Fin"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 16, "chunk_id": "PYTH_1300 - C01 - Listas 01-s16-c1", "text": "main.py main.py Schools Slicing [:] - Básico Hay que indicar los dos índices: el de inicio y el de fin de la porción que queremos extraer. 0 1 2 3 4 5 6 Inicio Fin (excluido) Inicio Fin"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 17, "chunk_id": "PYTH_1300 - C01 - Listas 01-s17-c1", "text": "Schools main.py Si se deja en blanco el valor del primer índice, se toma el valor del primer elemento de la lista. Slicing [:] - Índice inicial"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 18, "chunk_id": "PYTH_1300 - C01 - Listas 01-s18-c1", "text": "main.py Schools 0 1 2 3 4 5 6 Inicio Slicing [:] - Índice inicial Si se deja en blanco el valor del primer índice, se toma el valor del primer elemento de la lista. Fin (excluido)"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 19, "chunk_id": "PYTH_1300 - C01 - Listas 01-s19-c1", "text": "main.py main.py Schools Hay que indicar los dos índices: el de inicio y el de fin de la porción que queremos extraer. 0 1 2 3 4 5 6 Inicio Inicio Fin Slicing [:] - Índice inicial Fin (excluido)"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 20, "chunk_id": "PYTH_1300 - C01 - Listas 01-s20-c1", "text": "Schools main.py Slicing [:] - Índice final Por último, si se deja en blanco el valor del último índice, se toma desde el valor del primer índice indicado hasta el final de la lista."}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 21, "chunk_id": "PYTH_1300 - C01 - Listas 01-s21-c1", "text": "main.py Schools 0 1 2 3 4 5 6 Inicio Fin Slicing [:] - Índice final Si se deja en blanco el valor del primer índice, se toma el valor del primer elemento de la lista."}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 22, "chunk_id": "PYTH_1300 - C01 - Listas 01-s22-c1", "text": "main.py main.py Schools Si se deja en blanco el valor del último índice, se toma desde el valor del primer índice indicado hasta el final de la lista. 0 1 2 3 4 5 6 Inicio Fin Inicio Fin Slicing [:] - Índice final"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 23, "chunk_id": "PYTH_1300 - C01 - Listas 01-s23-c1", "text": "Schools En este link podrás acceder al proyecto de Replit que usamos para los ejemplos de slicing."}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 24, "chunk_id": "PYTH_1300 - C01 - Listas 01-s24-c1", "text": "Métodos de listas"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 25, "chunk_id": "PYTH_1300 - C01 - Listas 01-s25-c1", "text": "Hay muchas funciones que podemos utilizar para trabajar con listas. Su objetivo es simplificar operaciones. Por ejemplo: min() max() sum() len() .sort() .reverse() .count()"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 26, "chunk_id": "PYTH_1300 - C01 - Listas 01-s26-c1", "text": "min() max() Devuelve el número menor de la lista. Devuelve el número máximo de la lista. Schools"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 27, "chunk_id": "PYTH_1300 - C01 - Listas 01-s27-c1", "text": "sum() len() Devuelve la suma de todos los números de la lista. Devuelve la cantidad de elementos según su longitud. Schools"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 28, "chunk_id": "PYTH_1300 - C01 - Listas 01-s28-c1", "text": "Ya pudimos hacer la suma, saber el largo de la lista y la cantidad de elementos que tiene… ¿Qué más podemos averiguar? Schools"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 29, "chunk_id": "PYTH_1300 - C01 - Listas 01-s29-c1", "text": ".sort() .reverse() Ordena los elementos de menor a mayor. Invierte el orden de los elementos. Schools"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 30, "chunk_id": "PYTH_1300 - C01 - Listas 01-s30-c1", "text": ".count() operador in ¿Cuántos alumnos se sacaron un 8? Devuelve la cantidad de veces que un elemento está dentro de una lista. Si no lo encuentra, devolverá cero. El resultado es siempre un número. ¿Hay manzanas en la canasta de frutas? Permite consultar si existe un valor dentro de una lista de elementos. Da como resultado un valor booleano (True o False). Schools"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 31, "chunk_id": "PYTH_1300 - C01 - Listas 01-s31-c1", "text": "Schools En este link podrás acceder al proyecto de Replit que usamos para los ejemplos de métodos y for in."}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 32, "chunk_id": "PYTH_1300 - C01 - Listas 01-s32-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 33, "chunk_id": "PYTH_1300 - C01 - Listas 01-s33-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1300 - C01 - Listas 01.pptx", "clase": "PYTH_1300 - C01 - Listas 01", "slide": 34, "chunk_id": "PYTH_1300 - C01 - Listas 01-s34-c1", "text": "La clase Listas 01 forma parte de… Serie: Senior Tracks Certificate Área(s): PROGRAMACIÓN POR CÓDIGO (PYTHON) Módulo: PYTHON: LISTAS Schools Digital Skills Diploma"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 1, "chunk_id": "PYTH_1300 - C02 - Listas 02-s1-c1", "text": "Listas 02 Schools"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 2, "chunk_id": "PYTH_1300 - C02 - Listas 02-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Agregar y quitar elementos de las listas. Utilizar distintos métodos y funciones. Combinar un bucle while con las listas."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 3, "chunk_id": "PYTH_1300 - C02 - Listas 02-s3-c1", "text": "¿Qué vas a aprender hoy? Schools Conocer la sintaxis de los métodos de las listas. Automatizar la carga de datos de una lista. Trabajar con los métodos: append() remove()"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 4, "chunk_id": "PYTH_1300 - C02 - Listas 02-s4-c1", "text": "Listas En la clase anterior, comenzamos a ver los distintos tipos de listas y algunas de las funciones más utilizadas. Pero…"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 5, "chunk_id": "PYTH_1300 - C02 - Listas 02-s5-c1", "text": "¿Qué pasa cuando tenemos que modificar listas, agregando o quitando elementos? Schools"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 6, "chunk_id": "PYTH_1300 - C02 - Listas 02-s6-c1", "text": "Schools Pensemos en un profesor que tiene que cargar una lista con las notas de un examen. Python nos ofrece distintos métodos para interactuar con las listas. Para este ejemplo, vamos a utilizar append(). Listas - Métodos"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 7, "chunk_id": "PYTH_1300 - C02 - Listas 02-s7-c1", "text": "Schools Listas - append() El método append() se utiliza para agregar un elemento al final de una lista."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 8, "chunk_id": "PYTH_1300 - C02 - Listas 02-s8-c1", "text": "Schools Listas - append() main.py notas es el nombre de la lista."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 9, "chunk_id": "PYTH_1300 - C02 - Listas 02-s9-c1", "text": "Schools Listas - append() main.py notas es el nombre de la lista. Agregar un punto y el método append() junto con sus paréntesis."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 10, "chunk_id": "PYTH_1300 - C02 - Listas 02-s10-c1", "text": "Schools Listas - append() main.py notas es el nombre de la lista. Agregar un punto y el método append() junto con sus paréntesis. Dentro de los paréntesis, ponemos el elemento que queremos agregar a la lista."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 11, "chunk_id": "PYTH_1300 - C02 - Listas 02-s11-c1", "text": "Schools Listas - Métodos Pero… Si hubo un error en la carga de las notas, ¿qué método podría usar el profesor para quitarla?"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 12, "chunk_id": "PYTH_1300 - C02 - Listas 02-s12-c1", "text": "Schools Listas - remove() Para quitar un elemento de una lista en Python, se usa el método remove(). Este método elimina el primer elemento que se encuentre con el valor especificado dentro de los paréntesis. Por ejemplo:"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 13, "chunk_id": "PYTH_1300 - C02 - Listas 02-s13-c1", "text": "Schools En este link podrás acceder al proyecto de Replit que usamos para los ejemplos de append() y remove()."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 14, "chunk_id": "PYTH_1300 - C02 - Listas 02-s14-c1", "text": "Schools ¿Podría el profesor hacer más rápida la carga de notas? Si hubiera muchas notas para cargar, el trabajo se volvería tedioso por la cantidad de líneas que tiene el código. Para facilitar la carga, podríamos usar un bucle while."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 15, "chunk_id": "PYTH_1300 - C02 - Listas 02-s15-c1", "text": "Schools Listas - while con append() main.py En este ejemplo, podemos ver que el bucle while se va a ejecutar según la cantidad de alumnos. Las notas se cargan a través de un input() y luego se agregan dentro de la lista con el método append()."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 16, "chunk_id": "PYTH_1300 - C02 - Listas 02-s16-c1", "text": "Schools Listas - while con append() Acá podemos ver cómo el profesor realiza la carga de notas de una forma más rápida."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 17, "chunk_id": "PYTH_1300 - C02 - Listas 02-s17-c1", "text": "Schools Listas - while con append() ¿Cómo hacemos para que la cantidad de alumnos sea dinámica? ¡Utilizando un input!"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 18, "chunk_id": "PYTH_1300 - C02 - Listas 02-s18-c1", "text": "Schools Listas - while con append() En algunas ocasiones, el profesor puede cometer un error de tipeo al ingresar la cantidad de alumnos, y la ejecución del código se va a detener. ¿Cómo podríamos evitar este error?"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 19, "chunk_id": "PYTH_1300 - C02 - Listas 02-s19-c1", "text": "Schools Los lenguajes tienen muchas funciones para el manejo de excepciones y errores. Sin entrar en demasiados detalles sobre esto, podemos utilizar un bucle while con el método isdigit() para evitar ese error."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 20, "chunk_id": "PYTH_1300 - C02 - Listas 02-s20-c1", "text": "Schools Listas - while con append() Ahora tenemos dos bucles while: uno para verificar que el valor ingresado como cantidad de alumnos sea un número, y otro para cargar las notas. El método isdigit() devuelve → True si todos los caracteres de la string son dígitos; de lo contrario, devuelve → False."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 21, "chunk_id": "PYTH_1300 - C02 - Listas 02-s21-c1", "text": "Schools En este link podrás acceder al proyecto de Replit que usamos para el ejemplo anterior."}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 22, "chunk_id": "PYTH_1300 - C02 - Listas 02-s22-c1", "text": "Schools Listas - Repaso Como vimos en la clase anterior, podemos utilizar distintas funciones para obtener valores de las listas. Por ejemplo: sum() len() promedio"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 23, "chunk_id": "PYTH_1300 - C02 - Listas 02-s23-c1", "text": "Schools Listas - Repaso Como vimos en la clase anterior, podemos utilizar distintas funciones para obtener valores de las listas. Por ejemplo: min() max() .count()"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 24, "chunk_id": "PYTH_1300 - C02 - Listas 02-s24-c1", "text": "Schools Listas - Repaso También existen métodos que nos permiten reorganizar los valores de las listas. Por ejemplo: .reverse() .sort()"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 25, "chunk_id": "PYTH_1300 - C02 - Listas 02-s25-c1", "text": "Actividades En Playground encontrarás un cuestionario con preguntas relacionadas a esta presentación. También tendrás que resolver una actividad y entregar el link en Playground. Schools"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 26, "chunk_id": "PYTH_1300 - C02 - Listas 02-s26-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 27, "chunk_id": "PYTH_1300 - C02 - Listas 02-s27-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1300 - C02 - Listas 02.pptx", "clase": "PYTH_1300 - C02 - Listas 02", "slide": 28, "chunk_id": "PYTH_1300 - C02 - Listas 02-s28-c1", "text": "La clase Listas 02 forma parte de… Serie: Senior Tracks Certificate Área(s): PROGRAMACIÓN POR CÓDIGO (PYTHON) Módulo: PYTHON: LISTAS Schools Digital Skills Diploma"}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 1, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s1-c1", "text": "Bucles for...in Schools"}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 2, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Recorrer los elementos de una lista y mostrarlos por consola. Traducir frases en inglés con el módulo translate."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 3, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s3-c1", "text": "¿Qué vas a aprender hoy? Schools Conocer la sintaxis de un bucle for. Iterar distintos tipos de datos, como listas o string. Utilizar funciones en conjunto con for."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 4, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s4-c1", "text": "Bucle for El for es un tipo de bucle parecido al while, pero con ciertas diferencias. La principal es que el número de iteraciones de un for está definido de antemano, mientras que el de un while no."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 5, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s5-c1", "text": "Bucle for En el while, la condición es evaluada en cada iteración para decidir si volver a ejecutar o no el código; en el for, no existe tal condición, sino un iterable que define las veces que se ejecutará el código. Veamos cómo iterar una lista →"}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 6, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s6-c1", "text": "Schools Bucle for - Iterar una lista En el siguiente ejemplo, vemos un bucle for que se ejecuta 5 veces para recorrer los elementos de una lista. La i es una variable que va tomando automáticamente el valor de los elementos de la lista, uno a uno, avanzando de posición en cada iteración del código."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 7, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s7-c1", "text": "Schools Bucle for - Sintaxis main.py for es una palabra reservada para definir bucles. Python utiliza la indentación para delimitar la estructura y establecer bloques de código."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 8, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s8-c1", "text": "Schools Bucle for - Sintaxis main.py for es una palabra reservada para definir bucles. Python utiliza la indentación para delimitar la estructura y establecer bloques de código. i es la variable que toma el valor del elemento dentro del iterador en cada paso del bucle."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 9, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s9-c1", "text": "Schools Bucle for - Sintaxis main.py for es una palabra reservada para definir bucles. Python utiliza la indentación para delimitar la estructura y establecer bloques de código. i es la variable que toma el valor del elemento dentro del iterador en cada paso del bucle. El operador in sirve para indicar dentro de qué elemento se va a iterar."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 10, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s10-c1", "text": "Schools Bucle for - Sintaxis main.py for es una palabra reservada para definir bucles. Python utiliza la indentación para delimitar la estructura y establecer bloques de código. i es la variable que toma el valor del elemento dentro del iterador en cada paso del bucle. El operador in sirve para indicar dentro de qué elemento se va a iterar. lista es la variable que sirve como iterable. Debemos cerrar la línea con dos puntos (:)."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 11, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s11-c1", "text": "Schools Bucle for - Sintaxis main.py for es una palabra reservada para definir bucles. Python utiliza la indentación para delimitar la estructura y establecer bloques de código. i es la variable que toma el valor del elemento dentro del iterador en cada paso del bucle. El operador in sirve para indicar dentro de qué elemento se va a iterar. lista es la variable que sirve como iterable. Debemos cerrar la línea con dos puntos (:). Dentro del bucle ponemos el código a ejecutar en cada iteración."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 12, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s12-c1", "text": "Schools En Python se puede iterar prácticamente todo, como por ejemplo, una cadena de texto. En el siguiente ejemplo, vemos cómo la i va tomando los valores de cada letra. Bucle for - Iterar un string"}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 13, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s13-c1", "text": "Schools En este link podrás acceder al proyecto de Replit que usamos para los ejemplos de bucle for para iterar una lista y un string."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 14, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s14-c1", "text": "Veamos más ejemplos Schools"}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 15, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s15-c1", "text": "Sin bucle for Con bucle for Tenemos que redondear los números de una lista. Para eso, Python tiene una función nativa llamada round(). Con la ayuda de un bucle for, nos podemos ahorrar muchas líneas de código. Schools"}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 16, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s16-c1", "text": "Schools main.py También podemos iterar listas de strings y utilizar métodos como upper() para pasar las palabras a mayúsculas o lower() para pasarlas a minúsculas. Bucle for - Ejemplos upper() lower()"}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 17, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s17-c1", "text": "Schools main.py Bucle for - Ejemplos En este ejemplo, creamos una función para pasar de grados centígrados a fahrenheit, y la utilizamos dentro de un bucle for para hacer la conversión de las temperaturas que se encuentran dentro de la lista."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 18, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s18-c1", "text": "Schools En este link podrás acceder al proyecto de Replit que usamos para los ejemplo de bucles for con round(), upper(), lower() y pasarAFahrenheit()."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 19, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s19-c1", "text": "Veamos un último ejemplo y aumentemos la dificultad. Schools"}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 20, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s20-c1", "text": "Schools Bucle for - translate En este ejemplo, vamos a usar la función translator() del módulo translate para traducir frases que están en inglés dentro de una lista. Ingresamos, como argumento de la función, el idioma al que queremos traducir la frase."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 21, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s21-c1", "text": "Schools Bucle for - translate Esta función nos permite traducir las frases a distintos idiomas. Ingresamos el idioma “arabic”."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 22, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s22-c1", "text": "Schools En este link podrás acceder al proyecto de Replit que usamos para el ejemplo con el módulo translate."}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 23, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s23-c1", "text": "Actividades En Playground encontrarás dos cuestionarios con preguntas relacionadas a esta presentación. También tendrás que resolver una actividad y entregar el link en Playground. Schools"}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 24, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s24-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 25, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s25-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1300 - C03 - Bucles for...in.pptx", "clase": "PYTH_1300 - C03 - Bucles for...in", "slide": 26, "chunk_id": "PYTH_1300 - C03 - Bucles for...in-s26-c1", "text": "La clase Bucles for...in forma parte de… Serie: Senior Tracks Certificate Área(s): Programación por código (PYTHON). Módulo: PYTHON: LISTAS Schools Digital Skills Diploma"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 1, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s1-c1", "text": "Diccionarios Schools"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 2, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Conocer la utilidad de los diccionarios en Python. Acceder a sus propiedades por medio de notación de corchetes. Modificar diccionarios a través de claves y valores."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 3, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s3-c1", "text": "¿Qué vas a aprender hoy? Schools Diccionarios."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 4, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s4-c1", "text": "Hasta ahora, conoces las variables y las listas para almacenar datos. Veamos un nueva estructura de datos en Python 😎 Schools"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 5, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s5-c1", "text": "main.py Schools Usamos variables cuando queremos guardar valores únicos, y listas para guardar un conjunto de valores. Repasando…"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 6, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s6-c1", "text": "main.py Schools Repasando… Entonces, si quisiéramos guardar la información de los invitados a una fiesta, podríamos hacer algo como esto: Estos tres datos describen lo que se necesita saber de una de las personas invitadas."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 7, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s7-c1", "text": "main.py Schools Repasando… Entonces, para la segunda y tercera personas invitadas, escribiríamos el mismo código:"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 8, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s8-c1", "text": "main.py Schools Repasando… Parece que está resuelto, ¿no? Persona invitada 1 Persona invitada 2 Persona invitada 3"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 9, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s9-c1", "text": "main.py Schools Repasando… ¿Cuántas variables fueron necesarias para almacenar a estas 3 personas? ¿Y si fueran 10 personas? ¿O 100? ¿Y si hubiera que almacenar el email de cada una y la hora de ingreso a la fiesta? ¿Habría que agregar cientos de variables más? ¿Hay alguna forma de agrupar estos datos por cada persona?"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 10, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s10-c1", "text": "¡Sí, con diccionarios!"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 11, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s11-c1", "text": "Diccionarios Cuando necesitas manejar varios datos relacionados para representar algo, puedes usar diccionarios. Un diccionario es una estructura de datos que permite almacenar cualquier tipo de información: cadenas de texto o caracteres, números enteros o con decimales, listas e incluso otros diccionarios."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 12, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s12-c1", "text": "Schools Diccionarios En el ejemplo de la fiesta, podemos representar a las personas creando un diccionario para cada una de ellas, así: persona1{ } | Clave | Valor “nombre” | “Juli” “apellido” | “Smith” “edad” | 25 persona2{ } | Clave | Valor “nombre” | “Ariel” “apellido” | “Díaz” “edad” | 22"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 13, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s13-c1", "text": "Schools Diccionarios - Sintaxis main.py Nombre de la variable."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 14, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s14-c1", "text": "Schools Diccionarios - Sintaxis main.py Nombre de la variable. Llaves que indican el inicio del diccionario."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 15, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s15-c1", "text": "Schools Diccionarios - Sintaxis main.py Nombre de la variable. Llaves que indican el inicio del diccionario. Propiedades del diccionario."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 16, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s16-c1", "text": "Schools Diccionarios - Sintaxis main.py Nombre o clave de las propiedades. Las propiedades son como variables asociadas con el diccionario. Cada una tiene su clave, en este caso: nombre, apellido, edad."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 17, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s17-c1", "text": "Schools Diccionarios - Sintaxis main.py Por otro lado, cada clave tiene su valor, que puede ser cualquier tipo de dato que queramos utilizar: números, strings o un valor booleano. Valores"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 18, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s18-c1", "text": "Schools Diccionarios - Sintaxis main.py Las claves y sus valores se separan con dos puntos."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 19, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s19-c1", "text": "Schools Diccionarios - Sintaxis main.py Las propiedades se separan con comas. Cuando se terminan de agregar todas las propiedades, luego de la última, no se coloca una coma."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 20, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s20-c1", "text": "Schools Diccionarios main.py ¡Y así se logra representar a múltiples personas! Con solo una variable para cada una."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 21, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s21-c1", "text": "¿Cómo acceder a los datos de un diccionario? Schools"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 22, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s22-c1", "text": "main.py Schools Acceder a los datos de un diccionario Para acceder a los datos de un diccionario, se utiliza la notación de corchetes. Se accede al valor de una propiedad usando su clave, escribiendo el nombre de la variable (el diccionario) y luego, entre corchetes, el nombre de la propiedad a la que se quiere acceder. En este caso, devuelve el valor Juli."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 23, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s23-c1", "text": "main.py Schools Acceder a los datos de un diccionario Podemos verificar esto haciendo un print para verlo en consola."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 24, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s24-c1", "text": "main.py Schools Acceder a los datos de un diccionario Si ahora quisiéramos acceder al apellido de la persona1, haríamos lo mismo, pero con la clave “apellido” entre los corchetes:"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 25, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s25-c1", "text": "main.py Schools Modificar los valores de las propiedades Incluso, se puede modificar el valor de una de las propiedades o claves del diccionario."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 26, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s26-c1", "text": "main.py Schools Diccionarios Y además, si la persona hubiera llevado, por ejemplo, un disfraz a la fiesta, también lo podrías agregar. Puedes agregar nuevas propiedades en un diccionario."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 27, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s27-c1", "text": "Schools En este link podrás acceder al proyecto de Replit que usamos para los ejemplo de diccionarios."}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 28, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s28-c1", "text": "Usar diccionarios en tu programa Con un diccionario puedes organizar, en forma de listados, mucha información relacionada que represente, por ejemplo, una persona, un producto, un posteo, una noticia... Schools"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 29, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s29-c1", "text": "Usar diccionarios en tu programa Con un diccionario puedes organizar, en forma de listados, mucha información relacionada que represente, por ejemplo, una persona, un producto, un posteo, una noticia... De esta forma, usarías diccionarios para estructurar todos los datos que necesite tu programa 😊. Schools"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 30, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s30-c1", "text": "Actividades En Playground encontrarás un cuestionario con preguntas relacionadas a esta presentación. También tendrás que resolver una actividad y entregar el link en Playground. Schools"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 31, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s31-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 32, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s32-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1400 - C01 - Diccionarios.pptx", "clase": "PYTH_1400 - C01 - Diccionarios", "slide": 33, "chunk_id": "PYTH_1400 - C01 - Diccionarios-s33-c1", "text": "La clase Diccionarios forma parte de… Serie: Senior Tracks Certificate Área(s): Programación por código (PYTHON). Módulo: PYTHON: ESTRUCTURAS DE DATOS Schools Digital Skills Diploma"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 1, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s1-c1", "text": "Listas de diccionarios Schools"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 2, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s2-c1", "text": "Schools ¿Qué vas a lograr hoy? Combinar listas con diccionarios. Acceder a los datos almacenados dentro de las listas."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 3, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s3-c1", "text": "¿Qué vas a aprender hoy? Schools Listas de distintos tipos de diccionarios. Iteración con bucles for."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 4, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s4-c1", "text": "main.py Schools Repaso Recuerda cómo son las listas y los diccionarios. Lista Diccionario"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 5, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s5-c1", "text": "main.py Schools Repaso Recuerda cómo son las listas y los diccionarios. Tanto las listas como los diccionarios, separan sus datos con comas."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 6, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s6-c1", "text": "main.py Schools Repaso Recuerda cómo son las listas y los diccionarios. 0 1 2 Los valores de una lista están numerados con índices que comienzan en 0. Y puedes saber su cantidad con len(frutas)."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 7, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s7-c1", "text": "main.py Schools Repaso Recuerda cómo son las listas y los diccionarios. Así, frutas[1] tiene como valor \"Mango\". ¿Cuánto vale frutas[0]? ¿y len(frutas)? 0 1 2"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 8, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s8-c1", "text": "main.py Schools Repaso Recuerda cómo son las listas y los diccionarios. En los diccionarios, hay propiedades con claves y valores. Estos datos se separan con dos puntos."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 9, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s9-c1", "text": "main.py Schools Repaso Recuerda cómo son las listas y los diccionarios. Para convocarlos, se usa el nombre del diccionario y la clave de la propiedad. vehiculo1[“color”] \"negro\""}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 10, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s10-c1", "text": "¡Y, por supuesto, se pueden combinar! Diccionarios Listas Un diccionario puede tener una lista como valor de una de sus propiedades… Y una lista puede tener diccionarios como valor. Schools"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 11, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s11-c1", "text": "Schools Diccionarios con listas en sus valores Fíjate en la propiedad poderes. Como hay varios poderes, es conveniente agruparlos. Esto se puede hacer con una lista. super1{ } | Clave | Valor “nombre” | “Hulk” “identidad” | “Bruce Banner” “poderes” | poderes[ ] | | | “fuerza” | “velocidad” | “salto” | “regeneración”"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 12, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s12-c1", "text": "main.py Schools Diccionarios con listas en sus valores Puedes acceder a sus poderes, así:"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 13, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s13-c1", "text": "Schools Diccionarios con listas en sus valores Este devolverá la lista completa."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 14, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s14-c1", "text": "Schools Diccionarios con listas en sus valores Puedes acceder al segundo poder, así:"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 15, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s15-c1", "text": "main.py Schools Acceder a los datos super1[“poderes”][1] Accede al diccionario super1"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 16, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s16-c1", "text": "main.py Schools Acceder a los datos super1[“poderes”][1] Accede a la clave “poderes” y lo que hay en la lista."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 17, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s17-c1", "text": "main.py Schools Acceder a los datos super1[“poderes”][1] Y luego, como con toda lista, se accede a la posición o índice del elemento que nos interese con los corchetes."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 18, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s18-c1", "text": "Schools Veamos cómo agrupar varios superhéroes en una misma lista."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 19, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s19-c1", "text": "¿Cómo se puede lograr en Python una estructura como esta? superHeroes[ ] | | 0 | 1 | 2 superHeroes[0]{ } | Clave | Valor “nombre” | “Hulk” “identidad” | “Bruce Banner” “poderes” | poderes[ ] | | “fuerza” | “velocidad” | “salto” superHeroes[1]{ } | Clave | Valor “nombre” | “Capitana Marvel” “identidad” | “Carol Danvers” “poderes” | poderes[ ] | | “energía” | “vuelo” | “fuerza” superHeroes[2]{ } | Clave | Valor “nombre” | “identidad” | “poderes” | poderes[ ] | | Schools"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 20, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s20-c1", "text": "main.py Schools Acceder a los datos Crear una lista vacía."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 21, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s21-c1", "text": "main.py Schools Acceder a los datos Agregar el primer superhéroe dentro de la lista usando append(). Este diccionario quedaría guardado en el índice [0]."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 22, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s22-c1", "text": "main.py Schools Acceder a los datos Este diccionario quedaría guardado en el índice [1]. Agregar el segundo superhéroe dentro de la lista, usando append()"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 23, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s23-c1", "text": "main.py Schools Acceder a los datos ¿Cómo harías para acceder al valor “salto” (el tercer poder de Hulk)?"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 24, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s24-c1", "text": "Schools Acceder a los datos superHeroes[0][“poderes”][2] ¿Cómo harías para acceder al valor “salto” (el tercer poder de Hulk)? main.py"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 25, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s25-c1", "text": "Schools En este link podrás acceder al proyecto de Replit que usamos para los ejemplos de listas y diccionarios."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 26, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s26-c1", "text": "Veamos un ejemplo más Schools"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 27, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s27-c1", "text": "Schools Iterar lista de diccionarios En este ejemplo, podemos ver una lista de diccionarios con cuatro artistas. ¿Podríamos mostrar por consola el “nombreArtistico” de cada artista utilizando un bucle for?"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 28, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s28-c1", "text": "Schools Iterar lista de diccionarios ¡SÍ! Esta sería una de las formas para poder hacerlo. Creamos un bucle for para iterar cada artista de la lista de diccionarios. En este link tienen el ejemplo hecho en Replit."}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 29, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s29-c1", "text": "Actividades En Playground encontrarás un cuestionario con preguntas relacionadas con esta presentación. También tendrás que resolver una actividad y entregar el link en Playground. Schools"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 30, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s30-c1", "text": "¿Preguntas? Schools"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 31, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s31-c1", "text": "¡A practicar! Schools"}, {"curso": "PYTH_1400 - C02 - Listas de Diccionarios.pptx", "clase": "PYTH_1400 - C02 - Listas de Diccionarios", "slide": 32, "chunk_id": "PYTH_1400 - C02 - Listas de Diccionarios-s32-c1", "text": "La clase Listas de diccionarios forma parte de… Serie: Senior Tracks Certificate Área(s): Programación por código (PYTHON). Módulo: PYTHON: ESTRUCTURAS DE DATOS Schools Digital Skills Diploma"}]